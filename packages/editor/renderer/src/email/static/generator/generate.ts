import * as svgexport from 'svgexport';
import { resolve } from 'path';
import { writeFileSync, readFileSync } from 'fs';
import * as rimraf from 'rimraf';
import imageSources from './image-sources';

const coreIconSrc = resolve(
  __dirname,
  '../../../../../../core/icon/svgs_raw/email',
);
const tempFolder = resolve(__dirname, './tmp');

const generatedWarning =
  '// DO NOT EDIT THIS FILE DIRECTLY! \n// This file was auto generated and may be overritten.\n// To make changes, use the generator.\n\n';

const exportOpts = imageSources.map(file => ({
  name: file.name,
  outputPath: resolve(tempFolder, `./${file.name}.png`),
  input: resolve(coreIconSrc, `${file.input}.svg`),
  output: resolve(tempFolder, `./${file.name}.png`) + ` ${file.exportSize}`,
}));

const createIcons = () => {
  svgexport.render(exportOpts, (err: any) => {
    // if (err) return console.log(err);
    createIndividualIconModules();

    const indexFileExports = exportOpts
      .map(icon => `export * from './${icon.name}'`)
      .join('\n');

    const indexFileEnum = `
      export enum IconName {
        ${exportOpts.map(icon => `${icon.name} = '${icon.name}',`).join('\n')}
      }`;

    const indexFileIconNameType = `
      export type IconString =
        ${exportOpts.map(icon => `'${icon.name}'`).join(' | ')}
      `;

    const indexFileContents = [
      generatedWarning,
      indexFileExports,
      indexFileEnum,
      indexFileIconNameType,
    ].join('\n');

    writeFileSync(resolve(__dirname, `../icons/index.ts`), indexFileContents);

    rimraf(tempFolder, (err?: any) => {
      // Done.
    });
  });
};

const createIndividualIconModules = () => {
  exportOpts.map(icon =>
    writeFileSync(
      resolve(__dirname, `../icons/${icon.name}.ts`),
      `${generatedWarning}
      export const ${icon.name} = 'data:image/png;base64,${readFileSync(
        icon.outputPath,
      ).toString('base64')}'`,
    ),
  );
};

createIcons();
