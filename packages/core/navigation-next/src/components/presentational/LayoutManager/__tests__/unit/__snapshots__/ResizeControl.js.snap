// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ResizeControlBase should not render GrabArea when \`isGrabAreaDisabled\` prop is true 1`] = `
<Fragment>
  <Outer>
    <Shadow
      direction="to left"
      isBold={false}
    />
    <div
      onMouseOver={[Function]}
    >
      <Tooltip
        component={[Function]}
        content={
          <div
            css="unknown styles"
          >
            <span>
              
            </span>
            <div
              css="unknown styles"
            >
              
            </div>
          </div>
        }
        delay={600}
        hideTooltipOnClick={true}
        mousePosition="bottom"
        position="right"
        tag="div"
      >
        <Button
          hasHighlight={false}
          hitAreaSize="large"
          innerRef={
            Object {
              "current": null,
            }
          }
          isVisible={false}
          onClick={[Function]}
        >
          <ChevronLeftIcon />
        </Button>
      </Tooltip>
    </div>
  </Outer>
  <LifeCycleProvider
    attributes={Object {}}
    isActive={false}
    styles={
      Object {
        "cursor": "ew-resize",
      }
    }
    target={<body />}
  />
</Fragment>
`;

exports[`ResizeControlBase should render correctly 1`] = `
<Fragment>
  <Outer>
    <Shadow
      direction="to left"
      isBold={false}
    />
    <GrabArea
      isBold={false}
      onMouseDown={[Function]}
      onMouseEnter={[Function]}
      onMouseLeave={[Function]}
      showHandle={false}
    />
    <div
      onMouseOver={[Function]}
    >
      <Tooltip
        component={[Function]}
        content={
          <div
            css="unknown styles"
          >
            <span>
              
            </span>
            <div
              css="unknown styles"
            >
              
            </div>
          </div>
        }
        delay={600}
        hideTooltipOnClick={true}
        mousePosition="bottom"
        position="right"
        tag="div"
      >
        <Button
          hasHighlight={false}
          hitAreaSize="large"
          innerRef={
            Object {
              "current": null,
            }
          }
          isVisible={false}
          onClick={[Function]}
        >
          <ChevronLeftIcon />
        </Button>
      </Tooltip>
    </div>
  </Outer>
  <LifeCycleProvider
    attributes={Object {}}
    isActive={false}
    styles={
      Object {
        "cursor": "ew-resize",
      }
    }
    target={<body />}
  />
</Fragment>
`;
